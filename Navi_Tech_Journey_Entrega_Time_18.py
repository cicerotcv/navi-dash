# -*- coding: utf-8 -*-
"""Navi Tech Journey_Entrega_Time 18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQkptMaSa-T4lqPWFeOPXNti7zLdYVN5

Autor: Time 18

Cicero 

Eric
"""

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Not connected to a GPU')
else:
  print(gpu_info)

from psutil import virtual_memory
ram_gb = virtual_memory().total / 1e9
print('Your runtime has {:.1f} gigabytes of available RAM\n'.format(ram_gb))

if ram_gb < 20:
  print('Not using a high-RAM runtime')
else:
  print('You are using a high-RAM runtime!')

import pandas as pd
!pip install plotly==5.3.1
import plotly
import plotly.express as px

print(plotly.__version__)

"""# **0. Lendo csv**

# Empresas

Todos os arquivos `.csv` utilizados foram fornecidos pela S&P (disponibilizados pela Navi na AWS). São eles:

```
companies_br.csv
companies_financials_br.csv
paris_alignment_br.csv
esg_scores_history_br.csv
environmental_data_history_br.csv
physical_risk_forecast_br.csv
```
"""

comp = pd.read_csv('companies_br.csv')
comp.head()

dfcortadocomp = comp.drop(['region', 'country', 'exchange'], axis=1)
dfcortadocomp.head()

"""# Financials

Transformar na mesma unidade
"""

df = pd.read_csv('companies_financials_br.csv')
df.head(2)

df['data_item_value_same_unit'] = df['data_item_value']*df['unit_value']

dfcortadofinancials = df.drop(['period_type', 'data_item_id', 'ref_date', 'unit_value', 'unit','data_item_value'], axis=1)
dfcortadofinancials.head()

"""# Paris"""

paris = pd.read_csv('paris_alignment_br.csv')
paris.head(2)

dfcortadoparis = paris.drop(['data_group', 'unit'], axis=1)
dfcortadoparis.head(2)

"""# ESG"""

esg = pd.read_csv('esg_scores_history_br.csv')
esg.head()

"""# Environmental Data"""

env = pd.read_csv('environmental_data_history_br.csv')
env.head()

dfcortadoenv = env.drop(['data_group', 'unit'], axis=1)
dfcortadoenv.head()

print(dfcortadoenv['fiscal_year'].unique(), '------',esg['assessment_year'].unique())

"""# Physical Risk Forecast"""

phisical = pd.read_csv('physical_risk_forecast_br.csv')
phisical.head()

dfcortadophisical = phisical.drop(['data_group', 'unit'], axis=1)
dfcortadophisical.head()

"""# **Mergear dados**"""

print(dfcortadocomp.shape)
print(dfcortadofinancials.shape)
print(dfcortadoparis.shape)
print(esg.shape)
print(dfcortadoenv.shape)
print(dfcortadophisical.shape)

merge1 = dfcortadocomp.merge(dfcortadofinancials, how= 'inner', on= 'company_id')

merge2 = merge1.merge(esg, how= 'inner', on= 'company_id')

merge2['industry_x'].unique()

merge2chart = merge2[merge2['data_item']=='Operating Income']
merge2chart = merge2chart[merge2chart['aspect']=='Human Capital Development']
merge2chart = merge2chart.dropna()
merge2chart.shape

lista = ['S&P Global ESG Score','Environmental Reporting','Corporate Governance','Codes of Business Conduct','Labor Practice Indicators','Fuel Efficiency']

from google.colab.data_table import  DataTable

mergechart = {}
for i in lista:
  mergechart[str(i)] = merge2[merge2['data_item']=='Operating Income']
  mergechart[str(i)] = mergechart[str(i)][mergechart[str(i)]['aspect']==f'{i}']

datatabels = {}

for i in mergechart:
   datatabels['datatabels_' +str(i)]= DataTable(mergechart[i].set_index('company_id'))

mergechart['S&P Global ESG Score'].head(2)

"""Visualização:

Scatterplot Resultado Operacional por Escoragem ESG de Desenvolvimento de Capital Humano
"""

import plotly.express as px
fig = px.scatter(merge2chart, x="score_value", y="data_item_value_same_unit", marginal_x="histogram", trendline= 'ols', )
fig.show();

import seaborn as sns

sns.pairplot(merge2chart, hue = 'industry_x')

"""Visualizações:

Gráficos de categorias e valores de escoragem ESG
"""

fig = px.scatter(merge2chart, y="industry_x", x="score_value", width = 1000, height = 1000)
fig.update_traces(marker_size=10)
fig.show()

fig = px.scatter(mergechart['S&P Global ESG Score'], y="industry_x", x="score_value", width = 1000, height = 1000)
fig.update_traces(marker_size=10)
fig.show()

"""Visualização:

Scatterplot Resultado Operacional por Escoragem ESG
"""

fig = px.scatter(mergechart['S&P Global ESG Score'], x="score_value", y="data_item_value_same_unit", marginal_x="histogram", marginal_y="histogram", trendline= 'ols', )
fig.show()

"""# **Scatterplot - Scores**"""

dfcortadoenv['sector_name'].unique()

dfcortadoenv2 = dfcortadoenv[dfcortadoenv['fiscal_year']>=2013]
dfcortadoenv3 = dfcortadoenv2.drop(['data_item_name', 'data_item_value', 'data_item_value', 'fiscal_year'], axis=1)
dfcortadoesg = esg.drop(['industry', 'parent_aspect', 'assessment_year', 'score_weight'], axis=1)

scatterplotado1 = dfcortadoenv3.merge(dfcortadoesg, how= 'inner', on= 'company_id')
scatterplotado1 = scatterplotado1.drop(['company_id'], axis=1)


scatterplotado1 = scatterplotado1[scatterplotado1['sector_name']=='Petroleum, Chemical, and Allied Products Wholesalers' ]
scatterplotado1.shape

sel1 = scatterplotado1[scatterplotado1['aspect']=='S&P Global ESG Score']
sel1 = sel1 = sel1.drop(['aspect'], axis=1)
sel1 = sel1.rename(columns = {'score_value':'S&P Global ESG Score'})
sel1.shape

sel2 = scatterplotado1[scatterplotado1['aspect']=='Environmental Dimension']
sel2 = sel2 = sel2.drop(['aspect'], axis=1)

sel2 = sel2.rename(columns = {'score_value':'Environmental Dimension Score'})
sel2.shape

sel3 = sel1.merge(sel2, how='inner', on= 'sector_name')

sel3.head(2)

sel3 = sel3.drop(['sector_name'], axis=1)

sel3.head()

sel3_sample=sel3.sample(n=1000)

sel3_sample.to_json('scatterplot- S&P- ENV.json')

fig = px.scatter(sel3_sample, x="S&P Global ESG Score", y="Environmental Dimension Score", marginal_x="histogram",marginal_y="histogram", trendline= 'ols',  width = 1000, height = 1000)
fig.show()

"""# **Relação ESG e poluentes**"""

dfcortadoenv2 = dfcortadoenv[dfcortadoenv['fiscal_year']>=2013]
merge3 = dfcortadoenv2.merge(esg, how= 'inner', on= 'company_id')

selecao1 = merge3[merge3['data_item_name']=='Absolute: Air Pollutants Direct & Indirect Cost']
selecao1 = selecao1[selecao1['aspect']=='S&P Global ESG Score']
selecao1.head()

uba = selecao1.groupby('sector_name')['data_item_value', 'score_value'].describe()
uba = uba.rename(columns={'data_item_value':'Absolute: Air Pollutants Direct & Indirect Cost', 'score_value':'Valor de Score'})
uba.to_json('ESGegastosgrafico.json')
uba.head(63)

selecao2 = merge3[merge3['data_item_name']=='Absolute: Direct & Indirect Cost']
selecao2 = selecao2[selecao2['aspect']=='S&P Global ESG Score']
selecao2.head()

uba2 = selecao2.groupby('sector_name')['data_item_value', 'score_value'].describe()
uba2 = uba2.rename(columns={'data_item_value':'Absolute: Direct & Indirect Cost', 'score_value':'Valor de Score'})
uba2.to_json('ESGegastosgraficoabsolutodireitoindireto.json')
uba.head(63)

selecao1.to_json('esgepoluentes.json')

sns.pairplot(selecao1,hue= 'industry')

"""Gráficos Sunbrust - Escoragem ESG por setor e ano fiscal"""

fig = px.sunburst(selecao1, path=['industry', 'sector_name', 'fiscal_year'], values='score_value')
fig.show()

fig = px.sunburst(selecao1, path=['industry', 'sector_name', 'fiscal_year'], values='score_value', color='sector_name')
fig.show()

"""Gráfico de Radar 

Nos eixos- os setores econômicos
Valores correspondentes as alturas - Custo da externalidade (em $Milhões)
Em cor gradativa - score value ESG
"""

selecao1.sort_values(by=['score_value'])
fig = px.bar_polar(selecao1, r="data_item_value", theta="industry", color="score_value", template="plotly_dark",
                   color_discrete_sequence= px.colors.sequential.Plasma_r, width= 2000, height = 1000)
fig.show()

dfcortadophisical.head()

dfcortadophisical.to_json('graficoRadarparaporSetor.json')

dfcortadophisical.head(2)

"""Gráfico de Radar 

Nos eixos- as categorias de escoragem física
Valores correspondentes as alturas - Score
Em cor gradativa - Probabilidade do cenário
"""

dfcortadophisical2 = dfcortadophisical[dfcortadophisical['sector_name']=='Iron ore mining']


fig = px.bar_polar(dfcortadophisical2, r="data_item_value", theta="data_item_name", color="scenario_level", template="plotly_dark",
                    color_discrete_sequence= px.colors.sequential.Plasma_r, width= 1500, height = 1000)
fig.show()

"""Gráfico em barras

Score composto por setor
"""

dfcortadophisical3 = dfcortadophisical[dfcortadophisical['data_item_name']== 'Composite Score']

import seaborn as sns
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,3)

teste = dfcortadophisical3[dfcortadophisical3.scenario_level == 'High']['sector_name'].value_counts()[:10]
plt.figure()
sns.barplot(teste.index, teste.values, alpha=0.8)
plt.xlabel('Setores', fontsize=12)
plt.xticks(fontsize= 10, rotation = 90);

"""# **Financials e Score**"""

merge5 = dfcortadofinancials.merge(esg, how='inner', on='company_id')

merge5.head(2)

dfmerge5 = merge5[merge5['data_item'] == 'Operating Income']
dfmerge5 = dfmerge5[dfmerge5['aspect'] == 'S&P Global ESG Score']

dfmerge5.shape

uca = dfmerge5.groupby('industry')['data_item_value_same_unit','score_value'].describe()
uca = uca.rename(columns={'data_item_value_same_unit	':'Operating Income','score_value':'S&P Global ESG Score'})
uca.to_json('Operation Income X Score.json')
uca.head()

"""# Best Score can lead to better stock return?"""

merge6 = dfmerge5.merge(dfcortadocomp, how='inner', on='company_id')
merge6.shape

merge6.groupby('industry_x')['data_item_value_same_unit','score_value'].describe()

merge667 = merge6[merge6['industry_x'] == 'ELC Electric Utilities']
merge667.nlargest(500, 'score_value', keep='all')['ticker'].unique()

"""As ações acima serão utilizadas para compor uma carteira que terá seu retorno comparável com o índice do setor de energia elétrica (IEE B3) de modo a responder a pergunta: posso ter uma carteira que ao menos mantenha meu retorno e as empresas nela sejam mais sustentáveis?

# Relação ESG e Paris
"""

dfcortadoparis = paris.drop(['data_group', 'unit'], axis=1)
dfcortadoparis.head(2)

merge4 = dfcortadoparis.merge(esg, how= 'inner', on = 'company_id')
merge44 = merge4.dropna()

merge4.head()

